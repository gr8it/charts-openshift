
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: {{ include "gitops-bootstrap.fullname" . }}
  # namespace: open-cluster-management-global-set
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "gitops-bootstrap.labels" . | nindent 4 }}
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: {{ include "gitops-bootstrap.fullname" . }}-operator
        spec:
          complianceType: musthave
          remediationAction: enforce
          severity: high
          upgradeApproval: None
          subscription:
            channel: gitops-1.16
            name: openshift-gitops-operator
            # source: redhat-operators
            # sourceNamespace: openshift-marketplace
            startingCSV: openshift-gitops-operator.v1.16.1
          versions:
            - openshift-gitops-operator.v1.16.1

    - extraDependencies:
        - name: {{ include "gitops-bootstrap.fullname" . }}-operator
          namespace: ""
          apiVersion: policy.open-cluster-management.io/v1beta1
          kind: OperatorPolicy
          compliance: Compliant
      objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{ include "gitops-bootstrap.fullname" . }}-argocd-exists
        spec:
          remediationAction: informonly
          severity: medium
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: argoproj.io/v1beta1
                kind: ArgoCD
                metadata:
                  name: openshift-gitops
                  namespace: openshift-gitops

    - extraDependencies:
        - name: {{ include "gitops-bootstrap.fullname" . }}-argocd-exists
          namespace: ""
          apiVersion: policy.open-cluster-management.io/v1
          kind: ConfigurationPolicy
          compliance: Compliant
      objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{ include "gitops-bootstrap.fullname" . }}-policy-healthchecks
        spec:
          remediationAction: enforce
          severity: medium
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: argoproj.io/v1beta1
                kind: ArgoCD
                metadata:
                  name: openshift-gitops
                  namespace: openshift-gitops
                spec:
                  resourceHealthChecks:
                    - group: policy.open-cluster-management.io
                      kind: CertificatePolicy
                      check: |
                        hs = {}
                        if obj.status == nil or obj.status.compliant == nil then
                          hs.status = "Progressing"
                          hs.message = "Waiting for the status to be reported"
                          return hs
                        end
                        if obj.status.compliant == "Compliant" then
                          hs.status = "Healthy"
                          hs.message = "All certificates found comply with the policy"
                          return hs
                        else
                          hs.status = "Degraded"
                          hs.message = "At least once certificate does not comply with the policy"
                          return hs
                        end
                    - group: policy.open-cluster-management.io
                      kind: ConfigurationPolicy
                      check: |
                        hs = {}
                        if obj.status == nil or obj.status.compliant == nil then
                          hs.status = "Progressing"
                          hs.message = "Waiting for the status to be reported"
                          return hs
                        end
                        if obj.status.lastEvaluatedGeneration ~= obj.metadata.generation then
                          hs.status = "Progressing"
                          hs.message = "Waiting for the status to be updated"
                          return hs  
                        end
                        if obj.status.compliant == "Compliant" then
                          hs.status = "Healthy"
                        else
                          hs.status = "Degraded"
                        end
                        if obj.status.compliancyDetails ~= nil then
                          messages = {}
                          for i, compliancy in ipairs(obj.status.compliancyDetails) do
                            if compliancy.conditions ~= nil then
                              for i, condition in ipairs(compliancy.conditions) do
                                if condition.message ~= nil and condition.type ~= nil then
                                  table.insert(messages, condition.type .. " - " .. condition.message)
                                end
                              end
                            end
                          end
                          hs.message = table.concat(messages, "; ")
                          return hs
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for compliance"
                        return hs
                    - group: policy.open-cluster-management.io
                      kind: OperatorPolicy
                      check: |
                        hs = {}
                        if obj.status == nil or obj.status.conditions == nil then
                          hs.status = "Progressing"
                          hs.message = "Waiting for the status to be reported"
                          return hs
                        end
                        if obj.status.observedGeneration ~= nil and obj.status.observedGeneration ~= obj.metadata.generation then
                          hs.status = "Progressing"
                          hs.message = "Waiting for the status to be updated"
                          return hs  
                        end
                        for i, condition in ipairs(obj.status.conditions) do
                          if condition.type == "Compliant" then
                            hs.message = condition.message
                            if condition.status == "True" then
                              hs.status = "Healthy"
                              return hs
                            else
                              hs.status = "Degraded"
                              return hs
                            end
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for the compliance condition"
                        return hs
                    - group: policy.open-cluster-management.io
                      kind: Policy
                      check: |
                        hs = {}
                        if obj.status == nil or obj.status.compliant == nil then
                          hs.status = "Progressing"
                          hs.message = "Waiting for the status to be reported"
                          return hs
                        end
                        if obj.status.compliant == "Compliant" then
                          hs.status = "Healthy"
                        else
                          hs.status = "Degraded"
                        end
                        noncompliants = {}
                        if obj.status.status ~= nil then
                          -- "root" policy
                          for i, entry in ipairs(obj.status.status) do
                            if entry.compliant ~= "Compliant" then
                              noncompliants[i] = entry.clustername
                            end
                          end
                          if table.getn(noncompliants) == 0 then
                            hs.message = "All clusters are compliant"
                          else
                            hs.message = "NonCompliant clusters: " .. table.concat(noncompliants, ", ")
                          end
                        elseif obj.status.details ~= nil then
                          -- "replicated" policy
                          for i, entry in ipairs(obj.status.details) do
                            if entry.compliant ~= "Compliant" then
                              noncompliants[i] = entry.templateMeta.name
                            end
                          end
                          if table.getn(noncompliants) == 0 then
                            hs.message = "All templates are compliant"
                          else
                            hs.message = "NonCompliant templates: " .. table.concat(noncompliants, ", ")
                          end
                        end
                        return hs

    - extraDependencies:
        - name: {{ include "gitops-bootstrap.fullname" . }}-operator
          namespace: ""
          apiVersion: policy.open-cluster-management.io/v1beta1
          kind: OperatorPolicy
          compliance: Compliant
      objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{ include "gitops-bootstrap.fullname" . }}-policy-permissions
        spec:
          remediationAction: enforce
          severity: medium
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRole
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: openshift-gitops-policy-admin
                rules:
                  - verbs:
                      - get
                      - list
                      - watch
                      - create
                      - update
                      - patch
                      - delete
                    apiGroups:
                      - policy.open-cluster-management.io
                    resources:
                      - certificatepolicies
                      - configurationpolicies
                      - operatorpolicies
                      - policies
                      - policysets
                      - placementbindings
                  - verbs:
                      - get
                      - list
                      - watch
                      - create
                      - update
                      - patch
                      - delete
                    apiGroups:
                      - apps.open-cluster-management.io
                    resources:
                      - placementrules
                  - verbs:
                      - get
                      - list
                      - watch
                      - create
                      - update
                      - patch
                      - delete
                    apiGroups:
                      - cluster.open-cluster-management.io
                    resources:
                      - placements
                      - placements/status
                      - placementdecisions
                      - placementdecisions/status
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRoleBinding
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: openshift-gitops-policy-admin
                subjects:
                  - kind: ServiceAccount
                    name: openshift-gitops-argocd-application-controller
                    namespace: openshift-gitops
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: openshift-gitops-policy-admin

    - extraDependencies:
        - name: {{ include "gitops-bootstrap.fullname" . }}-operator
          namespace: ""
          apiVersion: policy.open-cluster-management.io/v1beta1
          kind: OperatorPolicy
          compliance: Compliant
      objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{ include "gitops-bootstrap.fullname" . }}-repo-credentials
        spec:
          remediationAction: enforce
          severity: medium
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                data:  '{{ "{{" }}hub copySecretData "{{ .Release.Namespace }}" "{{ include "gitops-bootstrap.repoShort" . }}" hub{{ "}}" }}'
                kind: Secret
                metadata:
                  name: {{ include "gitops-bootstrap.repoShort" . }}
                  namespace: openshift-gitops
                  labels:
                    argocd.argoproj.io/secret-type: repo-creds
                type: Opaque

    - extraDependencies:
        - name: {{ include "gitops-bootstrap.fullname" . }}-operator
          namespace: ""
          apiVersion: policy.open-cluster-management.io/v1beta1
          kind: OperatorPolicy
          compliance: Compliant
      objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{ include "gitops-bootstrap.fullname" . }}-repository
        spec:
          remediationAction: enforce
          severity: medium
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: Secret
                metadata:
                  labels:
                    argocd.argoproj.io/secret-type: repository
                  name: default-{{ include "gitops-bootstrap.repoShort" . }}
                  namespace: openshift-gitops
                type: Opaque
                stringData:
                  name: default-{{ include "gitops-bootstrap.repoShort" . }}
                  type: git
                  url: {{ include "gitops-bootstrap.repoUrl" . }}
                  project: default

    - extraDependencies:
        - name: {{ include "gitops-bootstrap.fullname" . }}-operator
          namespace: ""
          apiVersion: policy.open-cluster-management.io/v1beta1
          kind: OperatorPolicy
          compliance: Compliant
      objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: {{ include "gitops-bootstrap.fullname" . }}-app-of-apps
        spec:
          remediationAction: enforce
          severity: medium
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  name: argocd-app-of-apps
                  namespace: openshift-gitops
                spec:
                  destination:
                    namespace: openshift-gitops
                    server: https://kubernetes.default.svc
                  project: default
                  {{- if .Values.syncPolicy.enabled }}
                  syncPolicy:
                    automated:
                      selfHeal: {{ .Values.syncPolicy.selfHeal }}
                      prune: {{ .Values.syncPolicy.prune }}
                  {{- end }}
                  source:
                    path: gitops/rendered/{{"{{"}}hub .ManagedClusterName | replace "local-cluster" "{{ .Values.cluster.name | default .Values.global.apc.cluster.name }}" hub{{"}}"}}/argocd-app-of-apps
                    {{/* assumption is, that the bootstrap is run from hub cluster = cluster.name contains the hub cluster name */}}
                    repoURL: {{ include "gitops-bootstrap.repoUrl" . }}
                    targetRevision: {{ include "gitops-bootstrap.targetRevision" . }}
                    directory:
                      recurse: true

---
apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  name: {{ include "gitops-bootstrap.fullname" . }}
  # namespace: open-cluster-management-global-set
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "gitops-bootstrap.labels" . | nindent 4 }}
spec:
  clusterSets:
    - global
  tolerations:
    - key: cluster.open-cluster-management.io/unreachable
      operator: Exists
    - key: cluster.open-cluster-management.io/unavailable
      operator: Exists
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: {{ include "gitops-bootstrap.fullname" . }}
  # namespace: open-cluster-management-global-set
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "gitops-bootstrap.labels" . | nindent 4 }}
placementRef:
  name: {{ include "gitops-bootstrap.fullname" . }}
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
subjects:
  - name: {{ include "gitops-bootstrap.fullname" . }}
    apiGroup: policy.open-cluster-management.io
    kind: Policy
---
apiVersion: cluster.open-cluster-management.io/v1beta2
kind: ManagedClusterSetBinding
metadata:
  name: global
  # namespace: open-cluster-management-global-set
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "gitops-bootstrap.labels" . | nindent 4 }}
spec:
  clusterSet: global
