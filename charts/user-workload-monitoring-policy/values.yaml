nameOverride: ~
fullnameOverride: ~

disabled: false

# Configuration for the Kyverno policy that creates PrometheusRule resources
# This policy automatically creates monitoring rules for namespaces labeled with 'apc.namespace.type: application'
# When a new namespace with this label is created, Kyverno will automatically generate PrometheusRule resources
kyvernoPolicy:
  name: "generate-prometheus-rules-for-user-workloads"
  
  # Target namespaces with this label for monitoring
  # Only namespaces with 'apc.namespace.type: application' will get PrometheusRule resources
  namespaceSelector:
    matchLabels:
      apc.namespace.type: "application"

# PrometheusRule template configuration
prometheusRule:
  # Rules for detecting pod issues in user workloads
  rules:
    # Pod CrashLoopBackOff detection
    - alert: AppPodCrashLooping
      expr: increase(kube_pod_container_status_restarts_total[1m]) > 3
      for: 2m
      severity: warning
      summary: Kubernetes pod crash looping (instance {{ $labels.instance }})
      description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping VALUE = {{ $value }} LABELS = {{ $labels }}"

    # Container OOMKilled detection
    - alert: AppContainerOOMKilled
      expr: increase(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[1m]) > 0
      for: 0m
      severity: critical
      summary: Container was OOMKilled (instance {{ $labels.instance }})
      description: "Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} was killed due to Out Of Memory. VALUE = {{ $value }} LABELS = {{ $labels }}"

      
    # Pod not healthy
    - alert: AppPodNotHealthy
      expr: sum by (namespace, pod) (kube_pod_status_phase{phase=~"Pending|Unknown|Failed"}) > 0
      for: 15m
      severity: critical
      summary: Kubernetes Pod not healthy (instance {{ $labels.instance }})
      description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-running state for longer than 15 minutes. VALUE = {{ $value }} LABELS = {{ $labels }}"

    # Pod containers not ready (catches issues like failing liveness probes)
    - alert: AppPodContainerNotReady
      expr: sum by (namespace, pod) (kube_pod_container_status_ready{condition="false"}) > 0
      for: 10m
      severity: warning
      summary: Kubernetes Pod containers not ready (instance {{ $labels.instance }})
      description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has containers that are not ready for longer than 10 minutes. This may indicate failing health checks. VALUE = {{ $value }} LABELS = {{ $labels }}"

    # Pod memory usage high
    - alert: AppContainerHighMemoryUsage
      expr: (sum(container_memory_working_set_bytes{name!=""}) BY (instance, name) / sum(container_spec_memory_limit_bytes > 0) BY (instance, name) * 100) > 80
      for: 2m
      severity: warning
      summary: Container High Memory usage (instance {{ $labels.instance }})
      description: "Container Memory usage is above 80% VALUE = {{ $value }} LABELS = {{ $labels }}"
    
    # Pod CPU usage high
    - alert: AppContainerHighCpuUtilization
      expr: (sum(rate(container_cpu_usage_seconds_total{container!=""}[5m])) by (pod, container) / sum(container_spec_cpu_quota{container!=""}/container_spec_cpu_period{container!=""}) by (pod, container) * 100) > 80
      for: 2m
      severity: warning
      summary: Container High CPU utilization (instance {{ $labels.instance }})
      description: "Container CPU utilization is above 80% VALUE = {{ $value }}  LABELS = {{ $labels }}"
