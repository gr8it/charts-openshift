{{- $roles := (include "kyverno-app-project.vaultRolesOverride" . | fromYaml) }}
{{- $capabilities := (include "kyverno-app-project.vaultCapabilitiesOverride" . | fromYaml) }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    {{- include "kyverno-app-project.labels" . | nindent 4 }}
    rbac.kyverno.io/aggregate-to-background-controller: "true"
  name: kyverno:background-controller:project-vault-groups
rules:
- apiGroups: ["vault.vault.upbound.io"]
  resources: ["policies"]
  verbs: ["get","create"]
- apiGroups: ["ldap.vault.upbound.io"]
  resources: ["authbackendgroups"]
  verbs: ["get","create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    {{- include "kyverno-app-project.labels" . | nindent 4 }}
    rbac.kyverno.io/aggregate-to-cleanup-controller: "true"
  name: kyverno:cleanup-controller:project-vault-groups
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list", "get"]
- apiGroups: ["vault.vault.upbound.io"]
  resources: ["policies"]
  verbs: ["delete", "list"]
- apiGroups: ["ldap.vault.upbound.io"]
  resources: ["authbackendgroups"]
  verbs: ["delete", "list"]

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: app-project-vault-groups
  annotations:
    policies.kyverno.io/title: Setup vault project groups and policies
    policies.kyverno.io/category: Secrets
    policies.kyverno.io/subject: project
    policies.kyverno.io/minversion: 1.13.0
  labels:
    {{- include "kyverno-app-project.labels" . | nindent 4 }}
spec:
  background: true
  rules:
  - name: project-vault-policy-group
    match:
      any:
      - resources:
          kinds: [Namespace]
          selector:
            matchLabels:
              apc.namespace.type: application
    context:
    # GLOBAL: LIST OF VAULT ROLES
    - name: vaultRoleList
      variable:
        value: 
        {{- range $vr, $vrs := $roles }}
        - {{ $vr }}
        {{- end }}
    # GLOBAL: VAULT PROVIDER CONFIG NAME
    - name: vaultProviderConfigRef 
      variable:
        value: {{ .Values.vaultGroupDefaults.providerConfigRef }}
    # GLOBAL: VAULT LDAP AUTH BACKEND NAME
    - name: vaultAuthBackendName
      variable:
        value: {{ .Values.vaultGroupDefaults.authBackendName }}
    # GLOBAL: OCP CLUSTER NAME (derived from openshift-console route host)
    - name: clusterName
      apiCall:
        urlPath: "/apis/route.openshift.io/v1/namespaces/openshift-console/routes/console"
        jmesPath: "split((spec.host || ''), '.') | [2]"
        method: GET
        default: ""
    # GLOBAL: ROLE/GROUP NAME PREFIX
    - name: vaultRolePrefix
      variable:
        value: "apc-{{ `{{ split((clusterName || ''), '') | [0] }}-{{ request.object.metadata.name }}` }}"
    skipBackgroundRequests: {{ .Values.vaultGroupDefaults.skipBackgroundRequests }}
    generate:
      generateExisting: true
      synchronize: false  # synchronization causes a reconciliation loop with crossplane
      foreach:
      # Vault Policy (ACL)
      - list: vaultRoleList
        context:
        - name: vaultRole
          variable:
            jmesPath: element
        - name: vaultRoleShort
          variable:
            value: >-
              {{- $expr := "" }}
              {{- range $vr, $vrs := $roles }}
                {{- $expr = printf "%svaultRole == '%s' && '%s' || " $expr $vr $vrs }}
              {{- end }}
              {{ "{{ " }}{{- trimSuffix " || " $expr -}}{{ " }}" }}
            default: ""
        - name: vaultRoleCapabilities
          variable:
            value: >-
              {{- $expr := "" }}
              {{- range $vr, $vrc := $capabilities }}
                {{- $expr = printf "%svaultRole == '%s' && '%s' || " $expr $vr (printf "\"%s\"" (join "\", \"" $vrc)) }}
              {{- end }}
              {{ "{{ " }}{{- trimSuffix " || " $expr -}}{{ " }}" }}
            default: ""
        preconditions:
          all:
          - key: "{{ `{{ length(vaultRoleShort || '') }}` }}"
            operator: GreaterThan
            value: 0
          - key: "{{ `{{ length(clusterName || '') }}` }}"
            operator: GreaterThan
            value: 0
        apiVersion: vault.vault.upbound.io/v1alpha1
        kind: Policy
        name: "{{ `{{ vaultRolePrefix }}-{{ vaultRoleShort }}` }}"
        data:
          spec:
            deletionPolicy: Delete
            forProvider:
              name: "{{ `{{ vaultRolePrefix }}-{{ vaultRoleShort }}` }}"
              policy: |
                # Access to secrets path (v1)
                path "apc/{{ `{{ split((clusterName || ''), '') | [0] }}/{{ request.object.metadata.name }}` }}/*" {
                  capabilities = [{{ `{{ vaultRoleCapabilities }}` }}]
                }

                # Access to secrets path (v2)
                path "apc/data/{{ `{{ split((clusterName || ''), '') | [0] }}/{{ request.object.metadata.name }}` }}/*" {
                  capabilities = [{{ `{{ vaultRoleCapabilities }}` }}]
                }

                # Access to metadata (v2)
                path "apc/metadata/{{ `{{ split((clusterName || ''), '') | [0] }}/{{ request.object.metadata.name }}` }}/*" {
                  capabilities = [{{ `{{ vaultRoleCapabilities }}` }}]
                }

                # Allow version delete
                path "apc/delete/{{ `{{ split((clusterName || ''), '') | [0] }}/{{ request.object.metadata.name }}` }}/*" {
                  capabilities = ["update"]
                }

                # Allow version destroy
                path "apc/destroy/{{ `{{ split((clusterName || ''), '') | [0] }}/{{ request.object.metadata.name }}` }}/*" {
                  capabilities = ["update"]
                }

                # Allow version undelete
                path "apc/undelete/{{ `{{ split((clusterName || ''), '') | [0] }}/{{ request.object.metadata.name }}` }}/*" {
                  capabilities = ["update"]
                }

                # Allow browsing to the project secrets
                path "apc/metadata/" {
                  capabilities = ["list"]
                }
                path "apc/metadata/{{ `{{ split((clusterName || ''), '') | [0] }}` }}" {
                  capabilities = ["list"]
                }

            providerConfigRef:
              name: "{{ `{{ vaultProviderConfigRef }}` }}"
      # Vault Group
      - list: vaultRoleList
        context:
        - name: vaultRole
          variable:
            jmesPath: element
        - name: vaultRoleShort
          variable:
            value: >-
              {{- $expr := "" }}
              {{- range $vr, $vrs := $roles }}
                {{- $expr = printf "%svaultRole == '%s' && '%s' || " $expr $vr $vrs }}
              {{- end }}
              {{ "{{ " }}{{- trimSuffix " || " $expr -}}{{ " }}" }}
            default: ""
        preconditions:
          all:
          - key: "{{ `{{ length(vaultRoleShort || '') }}` }}"
            operator: GreaterThan
            value: 0
          - key: "{{ `{{ length(clusterName || '') }}` }}"
            operator: GreaterThan
            value: 0
        apiVersion: ldap.vault.upbound.io/v1alpha1
        kind: AuthBackendGroup
        name: "{{ `{{ vaultRolePrefix }}-{{ vaultRoleShort }}` }}"
        data:
          spec:
            deletionPolicy: Delete
            forProvider:
              backend: "{{ `{{ vaultAuthBackendName }}` }}"
              groupname: "{{ `{{ vaultRolePrefix }}-{{ vaultRoleShort }}` }}"
              policies: ["{{ `{{ vaultRolePrefix }}-{{ vaultRoleShort }}` }}"]
            providerConfigRef:
              name: "{{ `{{ vaultProviderConfigRef }}` }}"

---
apiVersion: kyverno.io/v2
kind: ClusterCleanupPolicy
metadata:
  name: app-project-vault-groups-cleanup
  annotations:
    policies.kyverno.io/title: Cleanup vault project groups and policies
    policies.kyverno.io/category: Secrets
    policies.kyverno.io/subject: project
    policies.kyverno.io/minversion: 1.13.0
  labels:
    {{- include "kyverno-app-project.labels" . | nindent 4 }}
spec:
  schedule: "0 */3 * * *"
  match:
    all:
    - resources:
        kinds:
        - "vault.vault.upbound.io/*/Policy"
        - "ldap.vault.upbound.io/*/AuthBackendGroup"
        selector:
          matchLabels:
            generate.kyverno.io/policy-name: app-project-vault-groups
  context:
  - name: appNamespaces
    apiCall:
      urlPath: "/api/v1/namespaces"
      jmesPath: "items[?metadata.labels.\"apc.namespace.type\" == 'application'].metadata.name"
      default: ["{{ `{{ target.metadata.name | split(@, '-') | [2:-1] | join('-',@) }}` }}"]
  conditions:
    all:
    - key: "{{ `{{ target.metadata.name | split(@, '-') | [2:-1] | join('-',@) }}` }}"
      operator: AllNotIn
      value: "{{ `{{ appNamespaces }}` }}"
